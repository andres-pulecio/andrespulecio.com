name: Destroy infrastructure on AWS

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths: ["deploy/remove/**"]
  pull_request:
    branches: [main]
    paths: ["deploy/remove/**"]

jobs:
  destroy-infra-on-AWS:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::677615602730:role/github-actions
          aws-region: us-east-1
          mask-aws-account-id: 'true'

      - name: Fetch Resource IDs
        id: fetch-ids
        run: |
          VPC_ID=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=my-portfolio" --query "Vpcs[*].VpcId" --output text)
          IGW_ID=$(aws ec2 describe-internet-gateways --filters "Name=tag:Name,Values=my-portfolio" --query "InternetGateways[*].InternetGatewayId" --output text)
          SUBNET_1_ID=$(aws ec2 describe-subnets --filters "Name=tag:Name,Values=my-portfolio-1" --query "Subnets[*].SubnetId" --output text)
          SUBNET_2_ID=$(aws ec2 describe-subnets --filters "Name=tag:Name,Values=my-portfolio-2" --query "Subnets[*].SubnetId" --output text)
          SG_ID=$(aws ec2 describe-security-groups --filters "Name=tag:Name,Values=my-portfolio" --query "SecurityGroups[*].GroupId" --output text)
          ROUTE_TABLE_ID=$(aws ec2 describe-route-tables --filters "Name=tag:Name,Values=my-portfolio" --query "RouteTables[*].RouteTableId" --output text)
          CLUSTER_ARN=$(aws ecs list-clusters --query "clusterArns[?contains(@, 'my-portfolio')]" --output text)
          ZONE_ID=$(aws route53 list-hosted-zones-by-name --dns-name "andrespulecio.com" --query "HostedZones[0].Id" --output text)
          RECORD_SET_NAME="andrespulecio.com"
          LB_DNS_NAME=$(aws elbv2 describe-load-balancers --names "my-portfolio" --query "LoadBalancers[*].DNSName" --output text)     

          echo "VPC_ID=$VPC_ID" >> $GITHUB_ENV
          echo "IGW_ID=$IGW_ID" >> $GITHUB_ENV
          echo "SUBNET_1_ID=$SUBNET_1_ID" >> $GITHUB_ENV
          echo "SUBNET_2_ID=$SUBNET_2_ID" >> $GITHUB_ENV
          echo "SG_ID=$SG_ID" >> $GITHUB_ENV
          echo "ROUTE_TABLE_ID=$ROUTE_TABLE_ID" >> $GITHUB_ENV
          echo "CLUSTER_ARN=$CLUSTER_ARN" >> $GITHUB_ENV
          echo "ZONE_ID=$ZONE_ID" >> $GITHUB_ENV
          echo "RECORD_SET_NAME=$RECORD_SET_NAME" >> $GITHUB_ENV
          echo "LB_DNS_NAME=$LB_DNS_NAME" >> $GITHUB_ENV


      - name: Delete Resources
        run: |
          touch failed_resources.log

          # # Delete Load Balancer resources
          # LB_ARN=$(aws elbv2 describe-load-balancers --names my-portfolio --query "LoadBalancers[*].LoadBalancerArn" --output text || true)
          # TG_ARN=$(aws elbv2 describe-target-groups --names my-portfolio --query "TargetGroups[*].TargetGroupArn" --output text || true)
          # LISTENER_ARNS=$(aws elbv2 describe-listeners --load-balancer-arn $LB_ARN --query "Listeners[*].ListenerArn" --output text || true)

          # for LISTENER_ARN in $LISTENER_ARNS; do
          #   aws elbv2 delete-listener --listener-arn $LISTENER_ARN || echo "Listener $LISTENER_ARN not deleted" >> failed_resources.log
          # done
          # aws elbv2 delete-target-group --target-group-arn $TG_ARN || echo "Target Group $TG_ARN not deleted" >> failed_resources.log
          # aws elbv2 delete-load-balancer --load-balancer-arn $LB_ARN || echo "Load Balancer $LB_ARN not deleted" >> failed_resources.log

          # # Delete ECS service
          # SERVICE_NAME=$(aws ecs describe-services --cluster my-portfolio --services my-portfolio --query "services[*].serviceName" --output text || true)
          # aws ecs update-service --cluster my-portfolio --service $SERVICE_NAME --desired-count 0 || echo "Service $SERVICE_NAME not updated" >> failed_resources.log
          # aws ecs delete-service --cluster my-portfolio --service $SERVICE_NAME || echo "Service $SERVICE_NAME not deleted" >> failed_resources.log

          # # Stop ECS tasks
          # TASK_ARNS=$(aws ecs list-tasks --cluster my-portfolio --query "taskArns[*]" --output text || true)
          # for TASK_ARN in $TASK_ARNS; do
          #   aws ecs stop-task --cluster my-portfolio --task $TASK_ARN || echo "Task $TASK_ARN not stopped" >> failed_resources.log
          # done

          # # Delete ECS task definition
          # TASK_DEF_ARN=$(aws ecs describe-task-definition --task-definition my-portfolio --query "taskDefinition.taskDefinitionArn" --output text || true)
          # aws ecs deregister-task-definition --task-definition $TASK_DEF_ARN || echo "Task Definition $TASK_DEF_ARN not deregistered" >> failed_resources.log

          # # Delete ECS cluster
          # aws ecs delete-cluster --cluster ${{ env.CLUSTER_ARN }} || echo "Cluster ${{ env.CLUSTER_ARN }} not deleted" >> failed_resources.log

          # # Disassociate Route Table from subnets
          # ASSOCIATION_IDS=$(aws ec2 describe-route-tables --route-table-ids ${{ env.ROUTE_TABLE_ID }} --query "RouteTables[*].Associations[*].RouteTableAssociationId" --output text)
          # for ASSOCIATION_ID in $ASSOCIATION_IDS; do
          #   aws ec2 disassociate-route-table --association-id $ASSOCIATION_ID || echo "Route Table Association $ASSOCIATION_ID not deleted" >> failed_resources.log
          # done

          # # Delete Route Table
          # aws ec2 delete-route-table --route-table-id ${{ env.ROUTE_TABLE_ID }} || echo "Route Table ${{ env.ROUTE_TABLE_ID }} not deleted" >> failed_resources.log

          # # Detach Internet Gateway
          # aws ec2 detach-internet-gateway --internet-gateway-id ${{ env.IGW_ID }} --vpc-id ${{ env.VPC_ID }} || echo "Internet Gateway ${{ env.IGW_ID }} not detached" >> failed_resources.log

          # # Release Elastic IPs
          # ALLOC_IDS=$(aws ec2 describe-addresses --filters "Name=domain,Values=vpc" --query "Addresses[*].AllocationId" --output text || true)
          # for ALLOC_ID in $ALLOC_IDS; do
          #   aws ec2 release-address --allocation-id $ALLOC_ID || echo "Elastic IP $ALLOC_ID not released" >> failed_resources.log
          # done

          # # Delete Internet Gateway
          # aws ec2 delete-internet-gateway --internet-gateway-id ${{ env.IGW_ID }} || echo "Internet Gateway ${{ env.IGW_ID }} not deleted" >> failed_resources.log

          # # Delete Subnets
          # aws ec2 delete-subnet --subnet-id ${{ env.SUBNET_1_ID }} || echo "Subnet ${{ env.SUBNET_1_ID }} not deleted" >> failed_resources.log
          # aws ec2 delete-subnet --subnet-id ${{ env.SUBNET_2_ID }} || echo "Subnet ${{ env.SUBNET_2_ID }} not deleted" >> failed_resources.log

          # # Delete the VPC
          # aws ec2 delete-vpc --vpc-id ${{ env.VPC_ID }} || echo "VPC ${{ env.VPC_ID }} not deleted" >> failed_resources.log

          # # Delete Security Group
          # aws ec2 delete-security-group --group-id ${{ env.SG_ID }} || echo "Security Group ${{ env.SG_ID }} not deleted" >> failed_resources.log

          # Delete the Route 53 record
          aws route53 change-resource-record-sets --hosted-zone-id ${{ env.ZONE_ID }} --change-batch '
          {
            "Comment": "Deleting Record Set",
            "Changes": [{
              "Action": "DELETE",
              "ResourceRecordSet": {
                "Name": "andrespulecio.com", 
                "Type": "A",
                "AliasTarget": {
                  "HostedZoneId": "Z10425601FS7HZ7BI6L2C",
                  "DNSName": "my-portfolio-373534704.us-east-1.elb.amazonaws.com.",
                  "EvaluateTargetHealth": false
                }
              }
            }]
          }' || echo "Route 53 Record Set not deleted" >> failed_resources.log





      - name: Show Failed Resources
        if: always()
        run: |
          echo "Failed to delete the following resources:"
          cat failed_resources.log || echo "None"
